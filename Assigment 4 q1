#include <iostream>
#include <vector>
#include <algorithm>
#include <chrono>
using namespace std;
int main() {
    const int size = 100000;
    vector<int> data(size);

    // Initialize vector in descending order
    for (int i = size - 1; i >= 0; --i) {
        data[i] = i;
    }

    // Measure time for Bubble Sort
    auto bubbleSortStart = chrono::high_resolution_clock::now();
    // Implement Bubble Sort algorithm here
    auto bubbleSortEnd = chrono::high_resolution_clock::now();
    chrono::duration<double> bubbleSortTime = bubbleSortEnd - bubbleSortStart;

    // Measure time for STL sort
    auto stlSortStart = chrono::high_resolution_clock::now();
    sort(data.begin(), data.end());
    auto stlSortEnd = chrono::high_resolution_clock::now();
    chrono::duration<double> stlSortTime = stlSortEnd - stlSortStart;

    // Print execution time
    cout << "Bubble Sort Execution Time: " << bubbleSortTime.count() << " seconds\n";
    cout << "STL Sort Execution Time: " << stlSortTime.count() << " seconds\n";

    // Print first 10 and last 10 integers
    cout << "First 10 integers: ";
    for (int i = 0; i < 10; ++i) {
        cout << data[i] << " ";
    }

    cout << "\nLast 10 integers: ";
    for (int i = size - 10; i < size; ++i) {
        cout << data[i] << " ";
    }

    return 0;
}
q2
#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;
class Product {
public:
    int id;
    string name;
    // Add other relevant product details
    Product(int _id, const string& _name) : id(_id), name(_name) {}
};
class Inventory {
private:
    vector<Product> products;
public:
    void addProduct(const Product& product) {
        products.push_back(product);
    }
    void removeProduct(int productId) {
        auto it = remove_if(products.begin(), products.end(),
                            [productId](const Product& p) { return p.id == productId; });
        products.erase(it, products.end());
    }
    void displayInventory() {
        for (const auto& product : products) {
            cout << "ID: " << product.id << ", Name: " << product.name << endl;
        }
    }
};
int main() {
    // Example Usage
    Inventory inventory;
    // Adding products
    Product p1(1, "Product 1");
    Product p2(2, "Product 2");
    inventory.addProduct(p1);
    inventory.addProduct(p2);
    cout << "Inventory before removal:\n";
    inventory.displayInventory();
    // Removing product by ID
    int productIdToRemove = 1;
    inventory.removeProduct(productIdToRemove);
    cout << "\nInventory after removal:\n";
    inventory.displayInventory();
    return 0;
}